
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fbc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001fbc  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002184  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011fb  00000000  00000000  000041c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000053bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000054ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000566f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000072b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000081a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000933d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009b0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__vector_13>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include"Timer1_Fast_PWM.h"
#include"dc_motor.h"
#include "adc.h"

void main()
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c2 56       	subi	r28, 0x62	; 98
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
	/*config the uart to send info between the MCUs*/
	UART_ConfigType UART_config={BITS_8,Disabled,One_bit,BaudRate9600};
     b50:	ce 01       	movw	r24, r28
     b52:	8b 5a       	subi	r24, 0xAB	; 171
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	a0 96       	adiw	r28, 0x20	; 32
     b58:	9f af       	std	Y+63, r25	; 0x3f
     b5a:	8e af       	std	Y+62, r24	; 0x3e
     b5c:	a0 97       	sbiw	r28, 0x20	; 32
     b5e:	89 e6       	ldi	r24, 0x69	; 105
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a2 96       	adiw	r28, 0x22	; 34
     b64:	9f af       	std	Y+63, r25	; 0x3f
     b66:	8e af       	std	Y+62, r24	; 0x3e
     b68:	a2 97       	sbiw	r28, 0x22	; 34
     b6a:	97 e0       	ldi	r25, 0x07	; 7
     b6c:	a3 96       	adiw	r28, 0x23	; 35
     b6e:	9f af       	std	Y+63, r25	; 0x3f
     b70:	a3 97       	sbiw	r28, 0x23	; 35
     b72:	a2 96       	adiw	r28, 0x22	; 34
     b74:	ee ad       	ldd	r30, Y+62	; 0x3e
     b76:	ff ad       	ldd	r31, Y+63	; 0x3f
     b78:	a2 97       	sbiw	r28, 0x22	; 34
     b7a:	00 80       	ld	r0, Z
     b7c:	a2 96       	adiw	r28, 0x22	; 34
     b7e:	8e ad       	ldd	r24, Y+62	; 0x3e
     b80:	9f ad       	ldd	r25, Y+63	; 0x3f
     b82:	a2 97       	sbiw	r28, 0x22	; 34
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	a2 96       	adiw	r28, 0x22	; 34
     b88:	9f af       	std	Y+63, r25	; 0x3f
     b8a:	8e af       	std	Y+62, r24	; 0x3e
     b8c:	a2 97       	sbiw	r28, 0x22	; 34
     b8e:	a0 96       	adiw	r28, 0x20	; 32
     b90:	ee ad       	ldd	r30, Y+62	; 0x3e
     b92:	ff ad       	ldd	r31, Y+63	; 0x3f
     b94:	a0 97       	sbiw	r28, 0x20	; 32
     b96:	00 82       	st	Z, r0
     b98:	a0 96       	adiw	r28, 0x20	; 32
     b9a:	8e ad       	ldd	r24, Y+62	; 0x3e
     b9c:	9f ad       	ldd	r25, Y+63	; 0x3f
     b9e:	a0 97       	sbiw	r28, 0x20	; 32
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	a0 96       	adiw	r28, 0x20	; 32
     ba4:	9f af       	std	Y+63, r25	; 0x3f
     ba6:	8e af       	std	Y+62, r24	; 0x3e
     ba8:	a0 97       	sbiw	r28, 0x20	; 32
     baa:	a3 96       	adiw	r28, 0x23	; 35
     bac:	9f ad       	ldd	r25, Y+63	; 0x3f
     bae:	a3 97       	sbiw	r28, 0x23	; 35
     bb0:	91 50       	subi	r25, 0x01	; 1
     bb2:	a3 96       	adiw	r28, 0x23	; 35
     bb4:	9f af       	std	Y+63, r25	; 0x3f
     bb6:	a3 97       	sbiw	r28, 0x23	; 35
     bb8:	a3 96       	adiw	r28, 0x23	; 35
     bba:	ef ad       	ldd	r30, Y+63	; 0x3f
     bbc:	a3 97       	sbiw	r28, 0x23	; 35
     bbe:	ee 23       	and	r30, r30
     bc0:	c1 f6       	brne	.-80     	; 0xb72 <main+0x3c>
	/*initialize the motor*/
	DcMotor_Init();
     bc2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DcMotor_Init>
	/*initialize the uart*/
	UART_init(&UART_config);
     bc6:	ce 01       	movw	r24, r28
     bc8:	8b 5a       	subi	r24, 0xAB	; 171
     bca:	9f 4f       	sbci	r25, 0xFF	; 255
     bcc:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <UART_init>
	/*initialize the ADC*/
	ADC_config ADC_CONTROLLER={internal2_56,preclck_64};
     bd0:	fe 01       	movw	r30, r28
     bd2:	e4 5a       	subi	r30, 0xA4	; 164
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	80 ec       	ldi	r24, 0xC0	; 192
     bd8:	80 83       	st	Z, r24
     bda:	fe 01       	movw	r30, r28
     bdc:	e4 5a       	subi	r30, 0xA4	; 164
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	86 e0       	ldi	r24, 0x06	; 6
     be2:	81 83       	std	Z+1, r24	; 0x01
	ADC_init(&ADC_CONTROLLER);
     be4:	ce 01       	movw	r24, r28
     be6:	84 5a       	subi	r24, 0xA4	; 164
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	0e 94 a6 09 	call	0x134c	; 0x134c <ADC_init>
	/*initialize the leds*/
	LEDS_INIT();
     bee:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <LEDS_INIT>
	/*initialize the buzzer*/
	Buzzer_init();
     bf2:	0e 94 01 0a 	call	0x1402	; 0x1402 <Buzzer_init>
	/*enable the global interrupts*/
	SET_BIT(SREG,7);
     bf6:	af e5       	ldi	r26, 0x5F	; 95
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e5       	ldi	r30, 0x5F	; 95
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24
	while(1)
	{
		Timer1_Fast_PWM_Init(deg_0);
     c04:	8b eb       	ldi	r24, 0xBB	; 187
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 7d 09 	call	0x12fa	; 0x12fa <Timer1_Fast_PWM_Init>
		Buzzer_off();
     c0c:	0e 94 1e 0a 	call	0x143c	; 0x143c <Buzzer_off>
     c10:	c3 c0       	rjmp	.+390    	; 0xd98 <main+0x262>
		while(g_operation==LIGHTEN_GREEN_LED)
		{
			LEDS_LIGHTEN(LIGHTEN_GREEN_LED);
     c12:	84 e0       	ldi	r24, 0x04	; 4
     c14:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LEDS_LIGHTEN>
			DcMotor_Rotate(CW, ADC_readChannel(2)/4);
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	0e 94 ca 09 	call	0x1394	; 0x1394 <ADC_readChannel>
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	96 95       	lsr	r25
     c24:	87 95       	ror	r24
     c26:	98 2f       	mov	r25, r24
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	69 2f       	mov	r22, r25
     c2c:	0e 94 3f 0a 	call	0x147e	; 0x147e <DcMotor_Rotate>
     c30:	fe 01       	movw	r30, r28
     c32:	ef 5a       	subi	r30, 0xAF	; 175
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a0 e8       	ldi	r26, 0x80	; 128
     c3c:	bf e3       	ldi	r27, 0x3F	; 63
     c3e:	80 83       	st	Z, r24
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	a2 83       	std	Z+2, r26	; 0x02
     c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c46:	8e 01       	movw	r16, r28
     c48:	03 5b       	subi	r16, 0xB3	; 179
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	fe 01       	movw	r30, r28
     c4e:	ef 5a       	subi	r30, 0xAF	; 175
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	60 81       	ld	r22, Z
     c54:	71 81       	ldd	r23, Z+1	; 0x01
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	4a ef       	ldi	r20, 0xFA	; 250
     c60:	54 e4       	ldi	r21, 0x44	; 68
     c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	f8 01       	movw	r30, r16
     c6c:	80 83       	st	Z, r24
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	a2 83       	std	Z+2, r26	; 0x02
     c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c74:	fe 01       	movw	r30, r28
     c76:	e3 5b       	subi	r30, 0xB3	; 179
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e8       	ldi	r20, 0x80	; 128
     c88:	5f e3       	ldi	r21, 0x3F	; 63
     c8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c8e:	88 23       	and	r24, r24
     c90:	44 f4       	brge	.+16     	; 0xca2 <main+0x16c>
		__ticks = 1;
     c92:	fe 01       	movw	r30, r28
     c94:	e5 5b       	subi	r30, 0xB5	; 181
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
     ca0:	64 c0       	rjmp	.+200    	; 0xd6a <main+0x234>
	else if (__tmp > 65535)
     ca2:	fe 01       	movw	r30, r28
     ca4:	e3 5b       	subi	r30, 0xB3	; 179
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	3f ef       	ldi	r19, 0xFF	; 255
     cb4:	4f e7       	ldi	r20, 0x7F	; 127
     cb6:	57 e4       	ldi	r21, 0x47	; 71
     cb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	0c f0       	brlt	.+2      	; 0xcc2 <main+0x18c>
     cc0:	43 c0       	rjmp	.+134    	; 0xd48 <main+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc2:	fe 01       	movw	r30, r28
     cc4:	ef 5a       	subi	r30, 0xAF	; 175
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	60 81       	ld	r22, Z
     cca:	71 81       	ldd	r23, Z+1	; 0x01
     ccc:	82 81       	ldd	r24, Z+2	; 0x02
     cce:	93 81       	ldd	r25, Z+3	; 0x03
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8e 01       	movw	r16, r28
     ce2:	05 5b       	subi	r16, 0xB5	; 181
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	bc 01       	movw	r22, r24
     ce8:	cd 01       	movw	r24, r26
     cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	f8 01       	movw	r30, r16
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	80 83       	st	Z, r24
     cf8:	1f c0       	rjmp	.+62     	; 0xd38 <main+0x202>
     cfa:	fe 01       	movw	r30, r28
     cfc:	e7 5b       	subi	r30, 0xB7	; 183
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	88 ec       	ldi	r24, 0xC8	; 200
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d08:	fe 01       	movw	r30, r28
     d0a:	e7 5b       	subi	r30, 0xB7	; 183
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	f1 f7       	brne	.-4      	; 0xd12 <main+0x1dc>
     d16:	fe 01       	movw	r30, r28
     d18:	e7 5b       	subi	r30, 0xB7	; 183
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d20:	de 01       	movw	r26, r28
     d22:	a5 5b       	subi	r26, 0xB5	; 181
     d24:	bf 4f       	sbci	r27, 0xFF	; 255
     d26:	fe 01       	movw	r30, r28
     d28:	e5 5b       	subi	r30, 0xB5	; 181
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	11 96       	adiw	r26, 0x01	; 1
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	fe 01       	movw	r30, r28
     d3a:	e5 5b       	subi	r30, 0xB5	; 181
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	d1 f6       	brne	.-76     	; 0xcfa <main+0x1c4>
     d46:	28 c0       	rjmp	.+80     	; 0xd98 <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d48:	8e 01       	movw	r16, r28
     d4a:	05 5b       	subi	r16, 0xB5	; 181
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	fe 01       	movw	r30, r28
     d50:	e3 5b       	subi	r30, 0xB3	; 179
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	f8 01       	movw	r30, r16
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 83       	st	Z, r24
     d6a:	de 01       	movw	r26, r28
     d6c:	a9 5b       	subi	r26, 0xB9	; 185
     d6e:	bf 4f       	sbci	r27, 0xFF	; 255
     d70:	fe 01       	movw	r30, r28
     d72:	e5 5b       	subi	r30, 0xB5	; 181
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	11 96       	adiw	r26, 0x01	; 1
     d7c:	9c 93       	st	X, r25
     d7e:	8e 93       	st	-X, r24
     d80:	fe 01       	movw	r30, r28
     d82:	e9 5b       	subi	r30, 0xB9	; 185
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <main+0x254>
     d8e:	fe 01       	movw	r30, r28
     d90:	e9 5b       	subi	r30, 0xB9	; 185
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	80 83       	st	Z, r24
	SET_BIT(SREG,7);
	while(1)
	{
		Timer1_Fast_PWM_Init(deg_0);
		Buzzer_off();
		while(g_operation==LIGHTEN_GREEN_LED)
     d98:	80 91 68 00 	lds	r24, 0x0068
     d9c:	84 30       	cpi	r24, 0x04	; 4
     d9e:	09 f4       	brne	.+2      	; 0xda2 <main+0x26c>
     da0:	38 cf       	rjmp	.-400    	; 0xc12 <main+0xdc>
     da2:	94 c0       	rjmp	.+296    	; 0xecc <main+0x396>
			DcMotor_Rotate(CW, ADC_readChannel(2)/4);
			_delay_ms(1);
		}
		while(g_operation==LIGHTEN_YELLOW_LED)
		{
			LEDS_LIGHTEN(LIGHTEN_YELLOW_LED);
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LEDS_LIGHTEN>
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	0e 94 ca 09 	call	0x1394	; 0x1394 <ADC_readChannel>
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	98 2f       	mov	r25, r24
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	69 2f       	mov	r22, r25
     dbe:	0e 94 3f 0a 	call	0x147e	; 0x147e <DcMotor_Rotate>
     dc2:	fe 01       	movw	r30, r28
     dc4:	ed 5b       	subi	r30, 0xBD	; 189
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a0 e8       	ldi	r26, 0x80	; 128
     dce:	bf e3       	ldi	r27, 0x3F	; 63
     dd0:	80 83       	st	Z, r24
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	a2 83       	std	Z+2, r26	; 0x02
     dd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	8e 01       	movw	r16, r28
     dda:	01 5c       	subi	r16, 0xC1	; 193
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	fe 01       	movw	r30, r28
     de0:	ed 5b       	subi	r30, 0xBD	; 189
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	60 81       	ld	r22, Z
     de6:	71 81       	ldd	r23, Z+1	; 0x01
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	93 81       	ldd	r25, Z+3	; 0x03
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	4a ef       	ldi	r20, 0xFA	; 250
     df2:	54 e4       	ldi	r21, 0x44	; 68
     df4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	f8 01       	movw	r30, r16
     dfe:	80 83       	st	Z, r24
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	a2 83       	std	Z+2, r26	; 0x02
     e04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e06:	fe 01       	movw	r30, r28
     e08:	ff 96       	adiw	r30, 0x3f	; 63
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <main+0x2f6>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9e af       	std	Y+62, r25	; 0x3e
     e28:	8d af       	std	Y+61, r24	; 0x3d
     e2a:	46 c0       	rjmp	.+140    	; 0xeb8 <main+0x382>
	else if (__tmp > 65535)
     e2c:	fe 01       	movw	r30, r28
     e2e:	ff 96       	adiw	r30, 0x3f	; 63
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	3f ef       	ldi	r19, 0xFF	; 255
     e3c:	4f e7       	ldi	r20, 0x7F	; 127
     e3e:	57 e4       	ldi	r21, 0x47	; 71
     e40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e44:	18 16       	cp	r1, r24
     e46:	64 f5       	brge	.+88     	; 0xea0 <main+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e48:	fe 01       	movw	r30, r28
     e4a:	ed 5b       	subi	r30, 0xBD	; 189
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9e af       	std	Y+62, r25	; 0x3e
     e74:	8d af       	std	Y+61, r24	; 0x3d
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <main+0x360>
     e78:	88 ec       	ldi	r24, 0xC8	; 200
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9c af       	std	Y+60, r25	; 0x3c
     e7e:	8b af       	std	Y+59, r24	; 0x3b
     e80:	8b ad       	ldd	r24, Y+59	; 0x3b
     e82:	9c ad       	ldd	r25, Y+60	; 0x3c
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <main+0x34e>
     e88:	9c af       	std	Y+60, r25	; 0x3c
     e8a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e8e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	9e af       	std	Y+62, r25	; 0x3e
     e94:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e96:	8d ad       	ldd	r24, Y+61	; 0x3d
     e98:	9e ad       	ldd	r25, Y+62	; 0x3e
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	69 f7       	brne	.-38     	; 0xe78 <main+0x342>
     e9e:	16 c0       	rjmp	.+44     	; 0xecc <main+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea0:	fe 01       	movw	r30, r28
     ea2:	ff 96       	adiw	r30, 0x3f	; 63
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	9e af       	std	Y+62, r25	; 0x3e
     eb6:	8d af       	std	Y+61, r24	; 0x3d
     eb8:	8d ad       	ldd	r24, Y+61	; 0x3d
     eba:	9e ad       	ldd	r25, Y+62	; 0x3e
     ebc:	9a af       	std	Y+58, r25	; 0x3a
     ebe:	89 af       	std	Y+57, r24	; 0x39
     ec0:	89 ad       	ldd	r24, Y+57	; 0x39
     ec2:	9a ad       	ldd	r25, Y+58	; 0x3a
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <main+0x38e>
     ec8:	9a af       	std	Y+58, r25	; 0x3a
     eca:	89 af       	std	Y+57, r24	; 0x39
		{
			LEDS_LIGHTEN(LIGHTEN_GREEN_LED);
			DcMotor_Rotate(CW, ADC_readChannel(2)/4);
			_delay_ms(1);
		}
		while(g_operation==LIGHTEN_YELLOW_LED)
     ecc:	80 91 68 00 	lds	r24, 0x0068
     ed0:	85 30       	cpi	r24, 0x05	; 5
     ed2:	09 f4       	brne	.+2      	; 0xed6 <main+0x3a0>
     ed4:	67 cf       	rjmp	.-306    	; 0xda4 <main+0x26e>
     ed6:	81 c0       	rjmp	.+258    	; 0xfda <main+0x4a4>
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
			_delay_ms(1);
		}
		while(g_operation==LIGHTEN_RED_LED)
		{
			LEDS_LIGHTEN(LIGHTEN_RED_LED);
     ed8:	86 e0       	ldi	r24, 0x06	; 6
     eda:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LEDS_LIGHTEN>
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	0e 94 ca 09 	call	0x1394	; 0x1394 <ADC_readChannel>
     ee4:	96 95       	lsr	r25
     ee6:	87 95       	ror	r24
     ee8:	96 95       	lsr	r25
     eea:	87 95       	ror	r24
     eec:	98 2f       	mov	r25, r24
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	69 2f       	mov	r22, r25
     ef2:	0e 94 3f 0a 	call	0x147e	; 0x147e <DcMotor_Rotate>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a0 e8       	ldi	r26, 0x80	; 128
     efc:	bf e3       	ldi	r27, 0x3F	; 63
     efe:	8d ab       	std	Y+53, r24	; 0x35
     f00:	9e ab       	std	Y+54, r25	; 0x36
     f02:	af ab       	std	Y+55, r26	; 0x37
     f04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f06:	6d a9       	ldd	r22, Y+53	; 0x35
     f08:	7e a9       	ldd	r23, Y+54	; 0x36
     f0a:	8f a9       	ldd	r24, Y+55	; 0x37
     f0c:	98 ad       	ldd	r25, Y+56	; 0x38
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a ef       	ldi	r20, 0xFA	; 250
     f14:	54 e4       	ldi	r21, 0x44	; 68
     f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	89 ab       	std	Y+49, r24	; 0x31
     f20:	9a ab       	std	Y+50, r25	; 0x32
     f22:	ab ab       	std	Y+51, r26	; 0x33
     f24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f26:	69 a9       	ldd	r22, Y+49	; 0x31
     f28:	7a a9       	ldd	r23, Y+50	; 0x32
     f2a:	8b a9       	ldd	r24, Y+51	; 0x33
     f2c:	9c a9       	ldd	r25, Y+52	; 0x34
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <main+0x412>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	98 ab       	std	Y+48, r25	; 0x30
     f44:	8f a7       	std	Y+47, r24	; 0x2f
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <main+0x490>
	else if (__tmp > 65535)
     f48:	69 a9       	ldd	r22, Y+49	; 0x31
     f4a:	7a a9       	ldd	r23, Y+50	; 0x32
     f4c:	8b a9       	ldd	r24, Y+51	; 0x33
     f4e:	9c a9       	ldd	r25, Y+52	; 0x34
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 e4       	ldi	r21, 0x47	; 71
     f58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	4c f5       	brge	.+82     	; 0xfb2 <main+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6d a9       	ldd	r22, Y+53	; 0x35
     f62:	7e a9       	ldd	r23, Y+54	; 0x36
     f64:	8f a9       	ldd	r24, Y+55	; 0x37
     f66:	98 ad       	ldd	r25, Y+56	; 0x38
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	98 ab       	std	Y+48, r25	; 0x30
     f86:	8f a7       	std	Y+47, r24	; 0x2f
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <main+0x472>
     f8a:	88 ec       	ldi	r24, 0xC8	; 200
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9e a7       	std	Y+46, r25	; 0x2e
     f90:	8d a7       	std	Y+45, r24	; 0x2d
     f92:	8d a5       	ldd	r24, Y+45	; 0x2d
     f94:	9e a5       	ldd	r25, Y+46	; 0x2e
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <main+0x460>
     f9a:	9e a7       	std	Y+46, r25	; 0x2e
     f9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	8f a5       	ldd	r24, Y+47	; 0x2f
     fa0:	98 a9       	ldd	r25, Y+48	; 0x30
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	98 ab       	std	Y+48, r25	; 0x30
     fa6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
     faa:	98 a9       	ldd	r25, Y+48	; 0x30
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	69 f7       	brne	.-38     	; 0xf8a <main+0x454>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <main+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	69 a9       	ldd	r22, Y+49	; 0x31
     fb4:	7a a9       	ldd	r23, Y+50	; 0x32
     fb6:	8b a9       	ldd	r24, Y+51	; 0x33
     fb8:	9c a9       	ldd	r25, Y+52	; 0x34
     fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	98 ab       	std	Y+48, r25	; 0x30
     fc4:	8f a7       	std	Y+47, r24	; 0x2f
     fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
     fc8:	98 a9       	ldd	r25, Y+48	; 0x30
     fca:	9c a7       	std	Y+44, r25	; 0x2c
     fcc:	8b a7       	std	Y+43, r24	; 0x2b
     fce:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd0:	9c a5       	ldd	r25, Y+44	; 0x2c
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <main+0x49c>
     fd6:	9c a7       	std	Y+44, r25	; 0x2c
     fd8:	8b a7       	std	Y+43, r24	; 0x2b
		{
			LEDS_LIGHTEN(LIGHTEN_YELLOW_LED);
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
			_delay_ms(1);
		}
		while(g_operation==LIGHTEN_RED_LED)
     fda:	80 91 68 00 	lds	r24, 0x0068
     fde:	86 30       	cpi	r24, 0x06	; 6
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <main+0x4ae>
     fe2:	7a cf       	rjmp	.-268    	; 0xed8 <main+0x3a2>
     fe4:	76 c0       	rjmp	.+236    	; 0x10d2 <main+0x59c>
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
			_delay_ms(1);
		}
		while(g_operation==STOP_MACHINE)
		{
			DcMotor_Rotate(STOP_MOTOR,ZeroSpeed);
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	0e 94 3f 0a 	call	0x147e	; 0x147e <DcMotor_Rotate>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 e8       	ldi	r26, 0x80	; 128
     ff4:	bf e3       	ldi	r27, 0x3F	; 63
     ff6:	8f a3       	std	Y+39, r24	; 0x27
     ff8:	98 a7       	std	Y+40, r25	; 0x28
     ffa:	a9 a7       	std	Y+41, r26	; 0x29
     ffc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	6f a1       	ldd	r22, Y+39	; 0x27
    1000:	78 a5       	ldd	r23, Y+40	; 0x28
    1002:	89 a5       	ldd	r24, Y+41	; 0x29
    1004:	9a a5       	ldd	r25, Y+42	; 0x2a
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	4a ef       	ldi	r20, 0xFA	; 250
    100c:	54 e4       	ldi	r21, 0x44	; 68
    100e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8b a3       	std	Y+35, r24	; 0x23
    1018:	9c a3       	std	Y+36, r25	; 0x24
    101a:	ad a3       	std	Y+37, r26	; 0x25
    101c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    101e:	6b a1       	ldd	r22, Y+35	; 0x23
    1020:	7c a1       	ldd	r23, Y+36	; 0x24
    1022:	8d a1       	ldd	r24, Y+37	; 0x25
    1024:	9e a1       	ldd	r25, Y+38	; 0x26
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <main+0x50a>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9a a3       	std	Y+34, r25	; 0x22
    103c:	89 a3       	std	Y+33, r24	; 0x21
    103e:	3f c0       	rjmp	.+126    	; 0x10be <main+0x588>
	else if (__tmp > 65535)
    1040:	6b a1       	ldd	r22, Y+35	; 0x23
    1042:	7c a1       	ldd	r23, Y+36	; 0x24
    1044:	8d a1       	ldd	r24, Y+37	; 0x25
    1046:	9e a1       	ldd	r25, Y+38	; 0x26
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <main+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	6f a1       	ldd	r22, Y+39	; 0x27
    105a:	78 a5       	ldd	r23, Y+40	; 0x28
    105c:	89 a5       	ldd	r24, Y+41	; 0x29
    105e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9a a3       	std	Y+34, r25	; 0x22
    107e:	89 a3       	std	Y+33, r24	; 0x21
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <main+0x56a>
    1082:	88 ec       	ldi	r24, 0xC8	; 200
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	98 a3       	std	Y+32, r25	; 0x20
    1088:	8f 8f       	std	Y+31, r24	; 0x1f
    108a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    108c:	98 a1       	ldd	r25, Y+32	; 0x20
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <main+0x558>
    1092:	98 a3       	std	Y+32, r25	; 0x20
    1094:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	89 a1       	ldd	r24, Y+33	; 0x21
    1098:	9a a1       	ldd	r25, Y+34	; 0x22
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9a a3       	std	Y+34, r25	; 0x22
    109e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	89 a1       	ldd	r24, Y+33	; 0x21
    10a2:	9a a1       	ldd	r25, Y+34	; 0x22
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <main+0x54c>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <main+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6b a1       	ldd	r22, Y+35	; 0x23
    10ac:	7c a1       	ldd	r23, Y+36	; 0x24
    10ae:	8d a1       	ldd	r24, Y+37	; 0x25
    10b0:	9e a1       	ldd	r25, Y+38	; 0x26
    10b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9a a3       	std	Y+34, r25	; 0x22
    10bc:	89 a3       	std	Y+33, r24	; 0x21
    10be:	89 a1       	ldd	r24, Y+33	; 0x21
    10c0:	9a a1       	ldd	r25, Y+34	; 0x22
    10c2:	9e 8f       	std	Y+30, r25	; 0x1e
    10c4:	8d 8f       	std	Y+29, r24	; 0x1d
    10c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <main+0x594>
    10ce:	9e 8f       	std	Y+30, r25	; 0x1e
    10d0:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			LEDS_LIGHTEN(LIGHTEN_RED_LED);
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
			_delay_ms(1);
		}
		while(g_operation==STOP_MACHINE)
    10d2:	80 91 68 00 	lds	r24, 0x0068
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	09 f4       	brne	.+2      	; 0x10dc <main+0x5a6>
    10da:	85 cf       	rjmp	.-246    	; 0xfe6 <main+0x4b0>
    10dc:	83 c0       	rjmp	.+262    	; 0x11e4 <main+0x6ae>
			DcMotor_Rotate(STOP_MOTOR,ZeroSpeed);
			_delay_ms(1);
		}
		while(g_operation==EMERGENCY)
		{
			LEDS_LIGHTEN(LIGHTEN_RED_LED);
    10de:	86 e0       	ldi	r24, 0x06	; 6
    10e0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LEDS_LIGHTEN>
			Buzzer_on();
    10e4:	0e 94 12 0a 	call	0x1424	; 0x1424 <Buzzer_on>
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	0e 94 ca 09 	call	0x1394	; 0x1394 <ADC_readChannel>
    10ee:	96 95       	lsr	r25
    10f0:	87 95       	ror	r24
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	98 2f       	mov	r25, r24
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	69 2f       	mov	r22, r25
    10fc:	0e 94 3f 0a 	call	0x147e	; 0x147e <DcMotor_Rotate>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e8       	ldi	r26, 0x80	; 128
    1106:	bf e3       	ldi	r27, 0x3F	; 63
    1108:	89 8f       	std	Y+25, r24	; 0x19
    110a:	9a 8f       	std	Y+26, r25	; 0x1a
    110c:	ab 8f       	std	Y+27, r26	; 0x1b
    110e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	69 8d       	ldd	r22, Y+25	; 0x19
    1112:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1114:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1116:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a ef       	ldi	r20, 0xFA	; 250
    111e:	54 e4       	ldi	r21, 0x44	; 68
    1120:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	8d 8b       	std	Y+21, r24	; 0x15
    112a:	9e 8b       	std	Y+22, r25	; 0x16
    112c:	af 8b       	std	Y+23, r26	; 0x17
    112e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1130:	6d 89       	ldd	r22, Y+21	; 0x15
    1132:	7e 89       	ldd	r23, Y+22	; 0x16
    1134:	8f 89       	ldd	r24, Y+23	; 0x17
    1136:	98 8d       	ldd	r25, Y+24	; 0x18
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <main+0x61c>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9c 8b       	std	Y+20, r25	; 0x14
    114e:	8b 8b       	std	Y+19, r24	; 0x13
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <main+0x69a>
	else if (__tmp > 65535)
    1152:	6d 89       	ldd	r22, Y+21	; 0x15
    1154:	7e 89       	ldd	r23, Y+22	; 0x16
    1156:	8f 89       	ldd	r24, Y+23	; 0x17
    1158:	98 8d       	ldd	r25, Y+24	; 0x18
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <main+0x686>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	69 8d       	ldd	r22, Y+25	; 0x19
    116c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    116e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1170:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9c 8b       	std	Y+20, r25	; 0x14
    1190:	8b 8b       	std	Y+19, r24	; 0x13
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <main+0x67c>
    1194:	88 ec       	ldi	r24, 0xC8	; 200
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9a 8b       	std	Y+18, r25	; 0x12
    119a:	89 8b       	std	Y+17, r24	; 0x11
    119c:	89 89       	ldd	r24, Y+17	; 0x11
    119e:	9a 89       	ldd	r25, Y+18	; 0x12
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <main+0x66a>
    11a4:	9a 8b       	std	Y+18, r25	; 0x12
    11a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8b 89       	ldd	r24, Y+19	; 0x13
    11aa:	9c 89       	ldd	r25, Y+20	; 0x14
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	9c 8b       	std	Y+20, r25	; 0x14
    11b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8b 89       	ldd	r24, Y+19	; 0x13
    11b4:	9c 89       	ldd	r25, Y+20	; 0x14
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <main+0x65e>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <main+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	6d 89       	ldd	r22, Y+21	; 0x15
    11be:	7e 89       	ldd	r23, Y+22	; 0x16
    11c0:	8f 89       	ldd	r24, Y+23	; 0x17
    11c2:	98 8d       	ldd	r25, Y+24	; 0x18
    11c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9c 8b       	std	Y+20, r25	; 0x14
    11ce:	8b 8b       	std	Y+19, r24	; 0x13
    11d0:	8b 89       	ldd	r24, Y+19	; 0x13
    11d2:	9c 89       	ldd	r25, Y+20	; 0x14
    11d4:	98 8b       	std	Y+16, r25	; 0x10
    11d6:	8f 87       	std	Y+15, r24	; 0x0f
    11d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11da:	98 89       	ldd	r25, Y+16	; 0x10
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <main+0x6a6>
    11e0:	98 8b       	std	Y+16, r25	; 0x10
    11e2:	8f 87       	std	Y+15, r24	; 0x0f
		while(g_operation==STOP_MACHINE)
		{
			DcMotor_Rotate(STOP_MOTOR,ZeroSpeed);
			_delay_ms(1);
		}
		while(g_operation==EMERGENCY)
    11e4:	80 91 68 00 	lds	r24, 0x0068
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <main+0x6b8>
    11ec:	78 cf       	rjmp	.-272    	; 0x10de <main+0x5a8>
    11ee:	7f c0       	rjmp	.+254    	; 0x12ee <main+0x7b8>
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
			_delay_ms(1);
		}
		while(g_operation==ABNORMAL)
		{
			LEDS_LIGHTEN(LIGHTEN_RED_LED);
    11f0:	86 e0       	ldi	r24, 0x06	; 6
    11f2:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LEDS_LIGHTEN>
			Buzzer_on();
    11f6:	0e 94 12 0a 	call	0x1424	; 0x1424 <Buzzer_on>
			DcMotor_Rotate(STOP_MOTOR,ZeroSpeed);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	0e 94 3f 0a 	call	0x147e	; 0x147e <DcMotor_Rotate>
			Timer1_Fast_PWM_Init(deg_90);
    1202:	8a ef       	ldi	r24, 0xFA	; 250
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 7d 09 	call	0x12fa	; 0x12fa <Timer1_Fast_PWM_Init>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e4       	ldi	r25, 0x40	; 64
    120e:	ac e9       	ldi	r26, 0x9C	; 156
    1210:	b5 e4       	ldi	r27, 0x45	; 69
    1212:	8b 87       	std	Y+11, r24	; 0x0b
    1214:	9c 87       	std	Y+12, r25	; 0x0c
    1216:	ad 87       	std	Y+13, r26	; 0x0d
    1218:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6b 85       	ldd	r22, Y+11	; 0x0b
    121c:	7c 85       	ldd	r23, Y+12	; 0x0c
    121e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1220:	9e 85       	ldd	r25, Y+14	; 0x0e
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	54 e4       	ldi	r21, 0x44	; 68
    122a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8f 83       	std	Y+7, r24	; 0x07
    1234:	98 87       	std	Y+8, r25	; 0x08
    1236:	a9 87       	std	Y+9, r26	; 0x09
    1238:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <main+0x726>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
    125a:	3f c0       	rjmp	.+126    	; 0x12da <main+0x7a4>
	else if (__tmp > 65535)
    125c:	6f 81       	ldd	r22, Y+7	; 0x07
    125e:	78 85       	ldd	r23, Y+8	; 0x08
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	9a 85       	ldd	r25, Y+10	; 0x0a
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <main+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	6b 85       	ldd	r22, Y+11	; 0x0b
    1276:	7c 85       	ldd	r23, Y+12	; 0x0c
    1278:	8d 85       	ldd	r24, Y+13	; 0x0d
    127a:	9e 85       	ldd	r25, Y+14	; 0x0e
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9e 83       	std	Y+6, r25	; 0x06
    129a:	8d 83       	std	Y+5, r24	; 0x05
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <main+0x786>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 83       	std	Y+4, r25	; 0x04
    12a4:	8b 83       	std	Y+3, r24	; 0x03
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <main+0x774>
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <main+0x768>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <main+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	8d 83       	std	Y+5, r24	; 0x05
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	9a 81       	ldd	r25, Y+2	; 0x02
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <main+0x7b0>
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
			LEDS_LIGHTEN(LIGHTEN_RED_LED);
			Buzzer_on();
			DcMotor_Rotate(CW,ADC_readChannel(2)/4);
			_delay_ms(1);
		}
		while(g_operation==ABNORMAL)
    12ee:	80 91 68 00 	lds	r24, 0x0068
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <main+0x7c2>
    12f6:	7c cf       	rjmp	.-264    	; 0x11f0 <main+0x6ba>
    12f8:	85 cc       	rjmp	.-1782   	; 0xc04 <main+0xce>

000012fa <Timer1_Fast_PWM_Init>:
 *      Author: saber
 */
#include<avr/io.h>
#include"gpio.h"
void Timer1_Fast_PWM_Init(unsigned short duty_cycle)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <Timer1_Fast_PWM_Init+0x6>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	65 e0       	ldi	r22, 0x05	; 5
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    1312:	ec e4       	ldi	r30, 0x4C	; 76
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	11 82       	std	Z+1, r1	; 0x01
    1318:	10 82       	st	Z, r1
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
    131a:	e6 e4       	ldi	r30, 0x46	; 70
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	83 ec       	ldi	r24, 0xC3	; 195
    1320:	99 e0       	ldi	r25, 0x09	; 9
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24

	OCR1A = duty_cycle; /* Set the compare value */
    1326:	ea e4       	ldi	r30, 0x4A	; 74
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	80 83       	st	Z, r24
     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
     * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
	 */
	TCCR1A = (1<<WGM11) | (1<<COM1A1);
    1332:	ef e4       	ldi	r30, 0x4F	; 79
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	82 e8       	ldi	r24, 0x82	; 130
    1338:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
	 * 2. Prescaler = F_CPU/64
     */
	TCCR1B = (1<<WGM12) | (1<<WGM13) | (1<<CS10) | (1<<CS11);
    133a:	ee e4       	ldi	r30, 0x4E	; 78
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	8b e1       	ldi	r24, 0x1B	; 27
    1340:	80 83       	st	Z, r24
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <ADC_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void ADC_init(const ADC_config *ADC_config_ptr)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	00 d0       	rcall	.+0      	; 0x1352 <ADC_init+0x6>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 01 to choose AVCC = 5v asb reference voltage
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX =ADMUX|(ADC_config_ptr->ref_volt);
    135a:	a7 e2       	ldi	r26, 0x27	; 39
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e7 e2       	ldi	r30, 0x27	; 39
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	90 81       	ld	r25, Z
    1364:	e9 81       	ldd	r30, Y+1	; 0x01
    1366:	fa 81       	ldd	r31, Y+2	; 0x02
    1368:	80 81       	ld	r24, Z
    136a:	89 2b       	or	r24, r25
    136c:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA=(1<<ADEN);
    136e:	e6 e2       	ldi	r30, 0x26	; 38
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 e8       	ldi	r24, 0x80	; 128
    1374:	80 83       	st	Z, r24
	ADCSRA =ADCSRA|(ADC_config_ptr->pre);
    1376:	a6 e2       	ldi	r26, 0x26	; 38
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e6 e2       	ldi	r30, 0x26	; 38
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	90 81       	ld	r25, Z
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	89 2b       	or	r24, r25
    1388:	8c 93       	st	X, r24
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	87 70       	andi	r24, 0x07	; 7
    13a4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    13a6:	a7 e2       	ldi	r26, 0x27	; 39
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e7 e2       	ldi	r30, 0x27	; 39
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	80 7e       	andi	r24, 0xE0	; 224
    13b2:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    13b4:	a7 e2       	ldi	r26, 0x27	; 39
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e7 e2       	ldi	r30, 0x27	; 39
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	90 81       	ld	r25, Z
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	89 2b       	or	r24, r25
    13c2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    13c4:	a6 e2       	ldi	r26, 0x26	; 38
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e6 e2       	ldi	r30, 0x26	; 38
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 64       	ori	r24, 0x40	; 64
    13d0:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    13d2:	e6 e2       	ldi	r30, 0x26	; 38
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	80 71       	andi	r24, 0x10	; 16
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	b9 f3       	breq	.-18     	; 0x13d2 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    13e4:	a6 e2       	ldi	r26, 0x26	; 38
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e6 e2       	ldi	r30, 0x26	; 38
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 61       	ori	r24, 0x10	; 16
    13f0:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    13f2:	e4 e2       	ldi	r30, 0x24	; 36
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
}
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <Buzzer_init>:
 *******************************************************************************/
#include"buzzer.h"
#include"common_macros.h"
#include"gpio.h"
void Buzzer_init()
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_BIN_ID,PIN_OUTPUT);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	64 e0       	ldi	r22, 0x04	; 4
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_BIN_ID, LOGIC_LOW);
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	64 e0       	ldi	r22, 0x04	; 4
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <Buzzer_on>:
void Buzzer_on(void)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_BIN_ID, LOGIC_HIGH);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	64 e0       	ldi	r22, 0x04	; 4
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <Buzzer_off>:
void Buzzer_off(void)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_BIN_ID, LOGIC_LOW);
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	64 e0       	ldi	r22, 0x04	; 4
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DcMotor_Init>:
motor pins through the GPIO driver.
➢ Stop at the DC-Motor at the beginning through the GPIO driver.
 *
 */
void DcMotor_Init(void)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
	/* configure pin PC0 and PC1 as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN1,PIN_OUTPUT);
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	64 e0       	ldi	r22, 0x04	; 4
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN2,PIN_OUTPUT);
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	65 e0       	ldi	r22, 0x05	; 5
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	/* Motor is stop at the beginning */
	GPIO_writePort(PORTB_ID, STOP_MOTOR);
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <GPIO_writePort>
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <DcMotor_Rotate>:
stop the motor based on the state input state value.
➢ Send the required duty cycle to the PWM driver based on the
required speed value.
 */
void DcMotor_Rotate(uint8 state,uint8 speed)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <DcMotor_Rotate+0x6>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <DcMotor_Rotate+0x8>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	6a 83       	std	Y+2, r22	; 0x02
	Timer2_PWM_Init(speed);
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Timer2_PWM_Init>
	switch(state)
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3c 83       	std	Y+4, r19	; 0x04
    149c:	2b 83       	std	Y+3, r18	; 0x03
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	91 05       	cpc	r25, r1
    14a6:	51 f0       	breq	.+20     	; 0x14bc <DcMotor_Rotate+0x3e>
    14a8:	2b 81       	ldd	r18, Y+3	; 0x03
    14aa:	3c 81       	ldd	r19, Y+4	; 0x04
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <DcMotor_Rotate+0x54>
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	b9 f0       	breq	.+46     	; 0x14e8 <DcMotor_Rotate+0x6a>
    14ba:	20 c0       	rjmp	.+64     	; 0x14fc <DcMotor_Rotate+0x7e>
	{
	case CW:
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN1, LOGIC_HIGH);
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	64 e0       	ldi	r22, 0x04	; 4
    14c0:	41 e0       	ldi	r20, 0x01	; 1
    14c2:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN2, LOGIC_LOW);break;
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	65 e0       	ldi	r22, 0x05	; 5
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    14d0:	15 c0       	rjmp	.+42     	; 0x14fc <DcMotor_Rotate+0x7e>
	case A_CW:
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN1, LOGIC_LOW);
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	64 e0       	ldi	r22, 0x04	; 4
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN2, LOGIC_HIGH);break;
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	65 e0       	ldi	r22, 0x05	; 5
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    14e6:	0a c0       	rjmp	.+20     	; 0x14fc <DcMotor_Rotate+0x7e>
	case STOP_MOTOR:
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN1, LOGIC_LOW);
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	64 e0       	ldi	r22, 0x04	; 4
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN2, LOGIC_LOW);break;
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	65 e0       	ldi	r22, 0x05	; 5
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
	}
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <GPIO_setupPinDirection+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <GPIO_setupPinDirection+0x8>
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	6a 83       	std	Y+2, r22	; 0x02
    151c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	08 f0       	brcs	.+2      	; 0x1526 <GPIO_setupPinDirection+0x1c>
    1524:	d5 c0       	rjmp	.+426    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	08 f0       	brcs	.+2      	; 0x152e <GPIO_setupPinDirection+0x24>
    152c:	d1 c0       	rjmp	.+418    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3d 83       	std	Y+5, r19	; 0x05
    1536:	2c 83       	std	Y+4, r18	; 0x04
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	91 05       	cpc	r25, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <GPIO_setupPinDirection+0x3a>
    1542:	43 c0       	rjmp	.+134    	; 0x15ca <GPIO_setupPinDirection+0xc0>
    1544:	2c 81       	ldd	r18, Y+4	; 0x04
    1546:	3d 81       	ldd	r19, Y+5	; 0x05
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	2c f4       	brge	.+10     	; 0x1558 <GPIO_setupPinDirection+0x4e>
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	71 f0       	breq	.+28     	; 0x1572 <GPIO_setupPinDirection+0x68>
    1556:	bc c0       	rjmp	.+376    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
    1558:	2c 81       	ldd	r18, Y+4	; 0x04
    155a:	3d 81       	ldd	r19, Y+5	; 0x05
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <GPIO_setupPinDirection+0x5a>
    1562:	5f c0       	rjmp	.+190    	; 0x1622 <GPIO_setupPinDirection+0x118>
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <GPIO_setupPinDirection+0x66>
    156e:	85 c0       	rjmp	.+266    	; 0x167a <GPIO_setupPinDirection+0x170>
    1570:	af c0       	rjmp	.+350    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1578:	aa e3       	ldi	r26, 0x3A	; 58
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	ea e3       	ldi	r30, 0x3A	; 58
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_setupPinDirection+0x8c>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_setupPinDirection+0x88>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	98 c0       	rjmp	.+304    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15a0:	aa e3       	ldi	r26, 0x3A	; 58
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ea e3       	ldi	r30, 0x3A	; 58
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_setupPinDirection+0xb4>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_setupPinDirection+0xb0>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	83 c0       	rjmp	.+262    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	a1 f4       	brne	.+40     	; 0x15f8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15d0:	a7 e3       	ldi	r26, 0x37	; 55
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e7 e3       	ldi	r30, 0x37	; 55
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_setupPinDirection+0xe4>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_setupPinDirection+0xe0>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	6c c0       	rjmp	.+216    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15f8:	a7 e3       	ldi	r26, 0x37	; 55
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e7 e3       	ldi	r30, 0x37	; 55
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_setupPinDirection+0x10c>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_setupPinDirection+0x108>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	57 c0       	rjmp	.+174    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	a1 f4       	brne	.+40     	; 0x1650 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1628:	a4 e3       	ldi	r26, 0x34	; 52
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e4 e3       	ldi	r30, 0x34	; 52
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <GPIO_setupPinDirection+0x13c>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <GPIO_setupPinDirection+0x138>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	40 c0       	rjmp	.+128    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1650:	a4 e3       	ldi	r26, 0x34	; 52
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e4 e3       	ldi	r30, 0x34	; 52
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_setupPinDirection+0x164>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_setupPinDirection+0x160>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	2b c0       	rjmp	.+86     	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1680:	a1 e3       	ldi	r26, 0x31	; 49
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e1 e3       	ldi	r30, 0x31	; 49
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_setupPinDirection+0x194>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_setupPinDirection+0x190>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	14 c0       	rjmp	.+40     	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16a8:	a1 e3       	ldi	r26, 0x31	; 49
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e1 e3       	ldi	r30, 0x31	; 49
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_setupPinDirection+0x1bc>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_setupPinDirection+0x1b8>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <GPIO_writePin+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_writePin+0x8>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	6a 83       	std	Y+2, r22	; 0x02
    16f2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	88 30       	cpi	r24, 0x08	; 8
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <GPIO_writePin+0x1c>
    16fa:	d5 c0       	rjmp	.+426    	; 0x18a6 <GPIO_writePin+0x1c6>
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	08 f0       	brcs	.+2      	; 0x1704 <GPIO_writePin+0x24>
    1702:	d1 c0       	rjmp	.+418    	; 0x18a6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3d 83       	std	Y+5, r19	; 0x05
    170c:	2c 83       	std	Y+4, r18	; 0x04
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	91 05       	cpc	r25, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <GPIO_writePin+0x3a>
    1718:	43 c0       	rjmp	.+134    	; 0x17a0 <GPIO_writePin+0xc0>
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	2c f4       	brge	.+10     	; 0x172e <GPIO_writePin+0x4e>
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	71 f0       	breq	.+28     	; 0x1748 <GPIO_writePin+0x68>
    172c:	bc c0       	rjmp	.+376    	; 0x18a6 <GPIO_writePin+0x1c6>
    172e:	2c 81       	ldd	r18, Y+4	; 0x04
    1730:	3d 81       	ldd	r19, Y+5	; 0x05
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	09 f4       	brne	.+2      	; 0x173a <GPIO_writePin+0x5a>
    1738:	5f c0       	rjmp	.+190    	; 0x17f8 <GPIO_writePin+0x118>
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	91 05       	cpc	r25, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <GPIO_writePin+0x66>
    1744:	85 c0       	rjmp	.+266    	; 0x1850 <GPIO_writePin+0x170>
    1746:	af c0       	rjmp	.+350    	; 0x18a6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	a1 f4       	brne	.+40     	; 0x1776 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    174e:	ab e3       	ldi	r26, 0x3B	; 59
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	eb e3       	ldi	r30, 0x3B	; 59
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <GPIO_writePin+0x8c>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <GPIO_writePin+0x88>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	98 c0       	rjmp	.+304    	; 0x18a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1776:	ab e3       	ldi	r26, 0x3B	; 59
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	eb e3       	ldi	r30, 0x3B	; 59
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <GPIO_writePin+0xb4>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <GPIO_writePin+0xb0>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	83 c0       	rjmp	.+262    	; 0x18a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	a1 f4       	brne	.+40     	; 0x17ce <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17a6:	a8 e3       	ldi	r26, 0x38	; 56
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <GPIO_writePin+0xe4>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <GPIO_writePin+0xe0>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	6c c0       	rjmp	.+216    	; 0x18a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17ce:	a8 e3       	ldi	r26, 0x38	; 56
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e8 e3       	ldi	r30, 0x38	; 56
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <GPIO_writePin+0x10c>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <GPIO_writePin+0x108>
    17f0:	80 95       	com	r24
    17f2:	84 23       	and	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	57 c0       	rjmp	.+174    	; 0x18a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	a1 f4       	brne	.+40     	; 0x1826 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <GPIO_writePin+0x13c>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <GPIO_writePin+0x138>
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	40 c0       	rjmp	.+128    	; 0x18a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1826:	a5 e3       	ldi	r26, 0x35	; 53
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e5 e3       	ldi	r30, 0x35	; 53
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <GPIO_writePin+0x164>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <GPIO_writePin+0x160>
    1848:	80 95       	com	r24
    184a:	84 23       	and	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	2b c0       	rjmp	.+86     	; 0x18a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	a1 f4       	brne	.+40     	; 0x187e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1856:	a2 e3       	ldi	r26, 0x32	; 50
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e2 e3       	ldi	r30, 0x32	; 50
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_writePin+0x194>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_writePin+0x190>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    187e:	a2 e3       	ldi	r26, 0x32	; 50
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e2 e3       	ldi	r30, 0x32	; 50
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_writePin+0x1bc>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_writePin+0x1b8>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <GPIO_readPin+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <GPIO_readPin+0x8>
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    18c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	88 30       	cpi	r24, 0x08	; 8
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <GPIO_readPin+0x1c>
    18d0:	84 c0       	rjmp	.+264    	; 0x19da <GPIO_readPin+0x124>
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	08 f0       	brcs	.+2      	; 0x18da <GPIO_readPin+0x24>
    18d8:	80 c0       	rjmp	.+256    	; 0x19da <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3d 83       	std	Y+5, r19	; 0x05
    18e2:	2c 83       	std	Y+4, r18	; 0x04
    18e4:	4c 81       	ldd	r20, Y+4	; 0x04
    18e6:	5d 81       	ldd	r21, Y+5	; 0x05
    18e8:	41 30       	cpi	r20, 0x01	; 1
    18ea:	51 05       	cpc	r21, r1
    18ec:	79 f1       	breq	.+94     	; 0x194c <GPIO_readPin+0x96>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	82 30       	cpi	r24, 0x02	; 2
    18f4:	91 05       	cpc	r25, r1
    18f6:	34 f4       	brge	.+12     	; 0x1904 <GPIO_readPin+0x4e>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	21 15       	cp	r18, r1
    18fe:	31 05       	cpc	r19, r1
    1900:	69 f0       	breq	.+26     	; 0x191c <GPIO_readPin+0x66>
    1902:	6b c0       	rjmp	.+214    	; 0x19da <GPIO_readPin+0x124>
    1904:	4c 81       	ldd	r20, Y+4	; 0x04
    1906:	5d 81       	ldd	r21, Y+5	; 0x05
    1908:	42 30       	cpi	r20, 0x02	; 2
    190a:	51 05       	cpc	r21, r1
    190c:	b9 f1       	breq	.+110    	; 0x197c <GPIO_readPin+0xc6>
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	9d 81       	ldd	r25, Y+5	; 0x05
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <GPIO_readPin+0x64>
    1918:	49 c0       	rjmp	.+146    	; 0x19ac <GPIO_readPin+0xf6>
    191a:	5f c0       	rjmp	.+190    	; 0x19da <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    191c:	e9 e3       	ldi	r30, 0x39	; 57
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <GPIO_readPin+0x7e>
    1930:	55 95       	asr	r21
    1932:	47 95       	ror	r20
    1934:	8a 95       	dec	r24
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <GPIO_readPin+0x7a>
    1938:	ca 01       	movw	r24, r20
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	90 70       	andi	r25, 0x00	; 0
    193e:	88 23       	and	r24, r24
    1940:	19 f0       	breq	.+6      	; 0x1948 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	49 c0       	rjmp	.+146    	; 0x19da <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1948:	19 82       	std	Y+1, r1	; 0x01
    194a:	47 c0       	rjmp	.+142    	; 0x19da <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    194c:	e6 e3       	ldi	r30, 0x36	; 54
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a9 01       	movw	r20, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <GPIO_readPin+0xae>
    1960:	55 95       	asr	r21
    1962:	47 95       	ror	r20
    1964:	8a 95       	dec	r24
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <GPIO_readPin+0xaa>
    1968:	ca 01       	movw	r24, r20
    196a:	81 70       	andi	r24, 0x01	; 1
    196c:	90 70       	andi	r25, 0x00	; 0
    196e:	88 23       	and	r24, r24
    1970:	19 f0       	breq	.+6      	; 0x1978 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	31 c0       	rjmp	.+98     	; 0x19da <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1978:	19 82       	std	Y+1, r1	; 0x01
    197a:	2f c0       	rjmp	.+94     	; 0x19da <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    197c:	e3 e3       	ldi	r30, 0x33	; 51
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a9 01       	movw	r20, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <GPIO_readPin+0xde>
    1990:	55 95       	asr	r21
    1992:	47 95       	ror	r20
    1994:	8a 95       	dec	r24
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <GPIO_readPin+0xda>
    1998:	ca 01       	movw	r24, r20
    199a:	81 70       	andi	r24, 0x01	; 1
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	88 23       	and	r24, r24
    19a0:	19 f0       	breq	.+6      	; 0x19a8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	19 c0       	rjmp	.+50     	; 0x19da <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19a8:	19 82       	std	Y+1, r1	; 0x01
    19aa:	17 c0       	rjmp	.+46     	; 0x19da <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19ac:	e0 e3       	ldi	r30, 0x30	; 48
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a9 01       	movw	r20, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <GPIO_readPin+0x10e>
    19c0:	55 95       	asr	r21
    19c2:	47 95       	ror	r20
    19c4:	8a 95       	dec	r24
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <GPIO_readPin+0x10a>
    19c8:	ca 01       	movw	r24, r20
    19ca:	81 70       	andi	r24, 0x01	; 1
    19cc:	90 70       	andi	r25, 0x00	; 0
    19ce:	88 23       	and	r24, r24
    19d0:	19 f0       	breq	.+6      	; 0x19d8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19d8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19da:	89 81       	ldd	r24, Y+1	; 0x01
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <GPIO_setupPortDirection+0x6>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <GPIO_setupPortDirection+0x8>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	84 30       	cpi	r24, 0x04	; 4
    1a00:	90 f5       	brcc	.+100    	; 0x1a66 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	3c 83       	std	Y+4, r19	; 0x04
    1a0a:	2b 83       	std	Y+3, r18	; 0x03
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	d1 f0       	breq	.+52     	; 0x1a4a <GPIO_setupPortDirection+0x5e>
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <GPIO_setupPortDirection+0x3e>
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <GPIO_setupPortDirection+0x54>
    1a28:	1e c0       	rjmp	.+60     	; 0x1a66 <GPIO_setupPortDirection+0x7a>
    1a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	81 f0       	breq	.+32     	; 0x1a54 <GPIO_setupPortDirection+0x68>
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	81 f0       	breq	.+32     	; 0x1a5e <GPIO_setupPortDirection+0x72>
    1a3e:	13 c0       	rjmp	.+38     	; 0x1a66 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a40:	ea e3       	ldi	r30, 0x3A	; 58
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	80 83       	st	Z, r24
    1a48:	0e c0       	rjmp	.+28     	; 0x1a66 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a4a:	e7 e3       	ldi	r30, 0x37	; 55
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 83       	st	Z, r24
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a54:	e4 e3       	ldi	r30, 0x34	; 52
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	80 83       	st	Z, r24
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a5e:	e1 e3       	ldi	r30, 0x31	; 49
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <GPIO_writePort+0x6>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <GPIO_writePort+0x8>
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	90 f5       	brcc	.+100    	; 0x1aee <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	3c 83       	std	Y+4, r19	; 0x04
    1a92:	2b 83       	std	Y+3, r18	; 0x03
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	d1 f0       	breq	.+52     	; 0x1ad2 <GPIO_writePort+0x5e>
    1a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa2:	22 30       	cpi	r18, 0x02	; 2
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <GPIO_writePort+0x3e>
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	61 f0       	breq	.+24     	; 0x1ac8 <GPIO_writePort+0x54>
    1ab0:	1e c0       	rjmp	.+60     	; 0x1aee <GPIO_writePort+0x7a>
    1ab2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab6:	22 30       	cpi	r18, 0x02	; 2
    1ab8:	31 05       	cpc	r19, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <GPIO_writePort+0x68>
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	83 30       	cpi	r24, 0x03	; 3
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	81 f0       	breq	.+32     	; 0x1ae6 <GPIO_writePort+0x72>
    1ac6:	13 c0       	rjmp	.+38     	; 0x1aee <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ac8:	eb e3       	ldi	r30, 0x3B	; 59
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
    1ad0:	0e c0       	rjmp	.+28     	; 0x1aee <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ad2:	e8 e3       	ldi	r30, 0x38	; 56
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	80 83       	st	Z, r24
    1ada:	09 c0       	rjmp	.+18     	; 0x1aee <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1adc:	e5 e3       	ldi	r30, 0x35	; 53
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ae6:	e2 e3       	ldi	r30, 0x32	; 50
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <GPIO_readPort+0x6>
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <GPIO_readPort+0x8>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b0a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	84 30       	cpi	r24, 0x04	; 4
    1b10:	90 f5       	brcc	.+100    	; 0x1b76 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	3c 83       	std	Y+4, r19	; 0x04
    1b1a:	2b 83       	std	Y+3, r18	; 0x03
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	91 05       	cpc	r25, r1
    1b24:	d1 f0       	breq	.+52     	; 0x1b5a <GPIO_readPort+0x5e>
    1b26:	2b 81       	ldd	r18, Y+3	; 0x03
    1b28:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2a:	22 30       	cpi	r18, 0x02	; 2
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <GPIO_readPort+0x3e>
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	61 f0       	breq	.+24     	; 0x1b50 <GPIO_readPort+0x54>
    1b38:	1e c0       	rjmp	.+60     	; 0x1b76 <GPIO_readPort+0x7a>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	22 30       	cpi	r18, 0x02	; 2
    1b40:	31 05       	cpc	r19, r1
    1b42:	81 f0       	breq	.+32     	; 0x1b64 <GPIO_readPort+0x68>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	83 30       	cpi	r24, 0x03	; 3
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	81 f0       	breq	.+32     	; 0x1b6e <GPIO_readPort+0x72>
    1b4e:	13 c0       	rjmp	.+38     	; 0x1b76 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b50:	e9 e3       	ldi	r30, 0x39	; 57
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	0e c0       	rjmp	.+28     	; 0x1b76 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b5a:	e6 e3       	ldi	r30, 0x36	; 54
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	09 c0       	rjmp	.+18     	; 0x1b76 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b64:	e3 e3       	ldi	r30, 0x33	; 51
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b6e:	e0 e3       	ldi	r30, 0x30	; 48
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <LEDS_INIT>:

#include "leds.h"
#include "gpio.h"

void LEDS_INIT()
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, PIN_OUTPUT);
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(YELLOW_LED_PORT, YELLOW_LED_PIN, PIN_OUTPUT);
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(RED_LED_PORT, RED_LED_PIN, PIN_OUTPUT);
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	62 e0       	ldi	r22, 0x02	; 2
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <LEDS_LIGHTEN>:

void LEDS_LIGHTEN(uint8 colour)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <LEDS_LIGHTEN+0x6>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	89 83       	std	Y+1, r24	; 0x01
	switch(colour){
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	3b 83       	std	Y+3, r19	; 0x03
    1bc8:	2a 83       	std	Y+2, r18	; 0x02
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bce:	85 30       	cpi	r24, 0x05	; 5
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	d1 f0       	breq	.+52     	; 0x1c08 <LEDS_LIGHTEN+0x56>
    1bd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd6:	3b 81       	ldd	r19, Y+3	; 0x03
    1bd8:	26 30       	cpi	r18, 0x06	; 6
    1bda:	31 05       	cpc	r19, r1
    1bdc:	29 f1       	breq	.+74     	; 0x1c28 <LEDS_LIGHTEN+0x76>
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	9b 81       	ldd	r25, Y+3	; 0x03
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	91 05       	cpc	r25, r1
    1be6:	79 f5       	brne	.+94     	; 0x1c46 <LEDS_LIGHTEN+0x94>
	case LIGHTEN_GREEN_LED  :
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_PIN, ON);
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT,YELLOW_LED_PIN, OFF);
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT,RED_LED_PIN, OFF);
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	62 e0       	ldi	r22, 0x02	; 2
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    1c06:	1f c0       	rjmp	.+62     	; 0x1c46 <LEDS_LIGHTEN+0x94>
		break;
	case LIGHTEN_YELLOW_LED :
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_PIN, OFF);
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT,YELLOW_LED_PIN, ON);
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT,RED_LED_PIN, OFF);
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <LEDS_LIGHTEN+0x94>
		break;
	case LIGHTEN_RED_LED    :
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_PIN, OFF);
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT,YELLOW_LED_PIN, OFF);
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT,RED_LED_PIN, ON);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
		break;
	}
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <Timer2_PWM_Init>:
#include<util/delay.h>
#include"gPio.h"
#include"common_macros.h"

void Timer2_PWM_Init(uint8 set_duty_cycle)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	if(set_duty_cycle==0)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	88 23       	and	r24, r24
    1c62:	39 f4       	brne	.+14     	; 0x1c72 <Timer2_PWM_Init+0x20>
	{
		TCCR2=0;
    1c64:	e5 e4       	ldi	r30, 0x45	; 69
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	10 82       	st	Z, r1
		OCR2=0;
    1c6a:	e3 e4       	ldi	r30, 0x43	; 67
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	10 82       	st	Z, r1
    1c70:	10 c0       	rjmp	.+32     	; 0x1c92 <Timer2_PWM_Init+0x40>
		return;
	}
	SET_VALUE_IN_REG(TCNT2,0); // Set Timer Initial Value to 0
    1c72:	e4 e4       	ldi	r30, 0x44	; 68
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	10 82       	st	Z, r1
	SET_VALUE_IN_REG(OCR2,set_duty_cycle); //Set Compare value
    1c78:	e3 e4       	ldi	r30, 0x43	; 67
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1c80:	83 e0       	ldi	r24, 0x03	; 3
    1c82:	67 e0       	ldi	r22, 0x07	; 7
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC2=0
	 * 2. Fast PWM Mode WGM21=1 & WGM20=1
	 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR2 = (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (1<<CS21);
    1c8a:	e5 e4       	ldi	r30, 0x45	; 69
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	8a e6       	ldi	r24, 0x6A	; 106
    1c90:	80 83       	st	Z, r24
}
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <Timer0_PWM_Init>:
#include<util/delay.h>
#include"gPio.h"
#include"common_macros.h"

void Timer0_PWM_Init(uint8 set_duty_cycle)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	0f 92       	push	r0
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	89 83       	std	Y+1, r24	; 0x01
	if(set_duty_cycle==0)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	88 23       	and	r24, r24
    1caa:	39 f4       	brne	.+14     	; 0x1cba <Timer0_PWM_Init+0x20>
	{
		TCCR0=0;
    1cac:	e3 e5       	ldi	r30, 0x53	; 83
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	10 82       	st	Z, r1
		OCR0=0;
    1cb2:	ec e5       	ldi	r30, 0x5C	; 92
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	10 82       	st	Z, r1
    1cb8:	10 c0       	rjmp	.+32     	; 0x1cda <Timer0_PWM_Init+0x40>
		return;
	}
	SET_VALUE_IN_REG(TCNT0,0); // Set Timer Initial Value to 0
    1cba:	e2 e5       	ldi	r30, 0x52	; 82
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	10 82       	st	Z, r1
	SET_VALUE_IN_REG(OCR0,set_duty_cycle); //Set Compare value
    1cc0:	ec e5       	ldi	r30, 0x5C	; 92
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	63 e0       	ldi	r22, 0x03	; 3
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1cd2:	e3 e5       	ldi	r30, 0x53	; 83
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	8a e6       	ldi	r24, 0x6A	; 106
    1cd8:	80 83       	st	Z, r24
}
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <__vector_13>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
ISR(USART_RXC_vect)
{
    1ce2:	1f 92       	push	r1
    1ce4:	0f 92       	push	r0
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	0f 92       	push	r0
    1cea:	11 24       	eor	r1, r1
    1cec:	8f 93       	push	r24
    1cee:	ef 93       	push	r30
    1cf0:	ff 93       	push	r31
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
	g_operation=UDR;
    1cfa:	ec e2       	ldi	r30, 0x2C	; 44
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	80 93 68 00 	sts	0x0068, r24
}
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	ff 91       	pop	r31
    1d0a:	ef 91       	pop	r30
    1d0c:	8f 91       	pop	r24
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	0f 90       	pop	r0
    1d14:	1f 90       	pop	r1
    1d16:	18 95       	reti

00001d18 <UART_init>:
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <UART_init+0x6>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <UART_init+0x8>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1d28:	1a 82       	std	Y+2, r1	; 0x02
    1d2a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1d2c:	eb e2       	ldi	r30, 0x2B	; 43
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
    1d34:	ea e2       	ldi	r30, 0x2A	; 42
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	88 e9       	ldi	r24, 0x98	; 152
    1d3a:	80 83       	st	Z, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    1d3c:	e0 e4       	ldi	r30, 0x40	; 64
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	86 e8       	ldi	r24, 0x86	; 134
    1d42:	80 83       	st	Z, r24
	UCSRC|=(Config_Ptr->parity);
    1d44:	a0 e4       	ldi	r26, 0x40	; 64
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e0 e4       	ldi	r30, 0x40	; 64
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	90 81       	ld	r25, Z
    1d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d50:	fc 81       	ldd	r31, Y+4	; 0x04
    1d52:	81 81       	ldd	r24, Z+1	; 0x01
    1d54:	89 2b       	or	r24, r25
    1d56:	8c 93       	st	X, r24
	UCSRC|=(Config_Ptr->stop_bit);
    1d58:	a0 e4       	ldi	r26, 0x40	; 64
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e0 e4       	ldi	r30, 0x40	; 64
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	90 81       	ld	r25, Z
    1d62:	eb 81       	ldd	r30, Y+3	; 0x03
    1d64:	fc 81       	ldd	r31, Y+4	; 0x04
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	89 2b       	or	r24, r25
    1d6a:	8c 93       	st	X, r24
	UCSRC|=(Config_Ptr->bit_data);
    1d6c:	a0 e4       	ldi	r26, 0x40	; 64
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e0 e4       	ldi	r30, 0x40	; 64
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	90 81       	ld	r25, Z
    1d76:	eb 81       	ldd	r30, Y+3	; 0x03
    1d78:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7a:	80 81       	ld	r24, Z
    1d7c:	89 2b       	or	r24, r25
    1d7e:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data==BITS_9)
    1d80:	eb 81       	ldd	r30, Y+3	; 0x03
    1d82:	fc 81       	ldd	r31, Y+4	; 0x04
    1d84:	80 81       	ld	r24, Z
    1d86:	86 30       	cpi	r24, 0x06	; 6
    1d88:	39 f4       	brne	.+14     	; 0x1d98 <UART_init+0x80>
	{
		SET_BIT(UCSRC,UCSZ2);
    1d8a:	a0 e4       	ldi	r26, 0x40	; 64
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e0 e4       	ldi	r30, 0x40	; 64
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	84 60       	ori	r24, 0x04	; 4
    1d96:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1d98:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9c:	83 81       	ldd	r24, Z+3	; 0x03
    1d9e:	94 81       	ldd	r25, Z+4	; 0x04
    1da0:	a5 81       	ldd	r26, Z+5	; 0x05
    1da2:	b6 81       	ldd	r27, Z+6	; 0x06
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	aa 1f       	adc	r26, r26
    1daa:	bb 1f       	adc	r27, r27
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	aa 1f       	adc	r26, r26
    1db2:	bb 1f       	adc	r27, r27
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	aa 1f       	adc	r26, r26
    1dba:	bb 1f       	adc	r27, r27
    1dbc:	9c 01       	movw	r18, r24
    1dbe:	ad 01       	movw	r20, r26
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	92 e1       	ldi	r25, 0x12	; 18
    1dc4:	aa e7       	ldi	r26, 0x7A	; 122
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__udivmodsi4>
    1dd0:	da 01       	movw	r26, r20
    1dd2:	c9 01       	movw	r24, r18
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1dda:	e0 e4       	ldi	r30, 0x40	; 64
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	89 2f       	mov	r24, r25
    1de4:	99 27       	eor	r25, r25
    1de6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1de8:	e9 e2       	ldi	r30, 0x29	; 41
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	80 83       	st	Z, r24
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	0f 92       	push	r0
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1e0a:	ec e2       	ldi	r30, 0x2C	; 44
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1e22:	ec e2       	ldi	r30, 0x2C	; 44
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <UART_sendString+0x6>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	9b 83       	std	Y+3, r25	; 0x03
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    1e40:	0e c0       	rjmp	.+28     	; 0x1e5e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	e2 0f       	add	r30, r18
    1e50:	f3 1f       	adc	r31, r19
    1e52:	80 81       	ld	r24, Z
    1e54:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <UART_sendByte>
		i++;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	8f 5f       	subi	r24, 0xFF	; 255
    1e5c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	80 81       	ld	r24, Z
    1e70:	88 23       	and	r24, r24
    1e72:	39 f7       	brne	.-50     	; 0x1e42 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <UART_receiveString+0xa>
    1e8a:	0f 92       	push	r0
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	9b 83       	std	Y+3, r25	; 0x03
    1e92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e94:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	8c 01       	movw	r16, r24
    1ea2:	02 0f       	add	r16, r18
    1ea4:	13 1f       	adc	r17, r19
    1ea6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <UART_recieveByte>
    1eaa:	f8 01       	movw	r30, r16
    1eac:	80 83       	st	Z, r24
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	8c 01       	movw	r16, r24
    1ec2:	02 0f       	add	r16, r18
    1ec4:	13 1f       	adc	r17, r19
    1ec6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <UART_recieveByte>
    1eca:	f8 01       	movw	r30, r16
    1ecc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 81       	ld	r24, Z
    1ee0:	83 32       	cpi	r24, 0x23	; 35
    1ee2:	31 f7       	brne	.-52     	; 0x1eb0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	9b 81       	ldd	r25, Y+3	; 0x03
    1eee:	fc 01       	movw	r30, r24
    1ef0:	e2 0f       	add	r30, r18
    1ef2:	f3 1f       	adc	r31, r19
    1ef4:	10 82       	st	Z, r1
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	08 95       	ret

00001f06 <__udivmodsi4>:
    1f06:	a1 e2       	ldi	r26, 0x21	; 33
    1f08:	1a 2e       	mov	r1, r26
    1f0a:	aa 1b       	sub	r26, r26
    1f0c:	bb 1b       	sub	r27, r27
    1f0e:	fd 01       	movw	r30, r26
    1f10:	0d c0       	rjmp	.+26     	; 0x1f2c <__udivmodsi4_ep>

00001f12 <__udivmodsi4_loop>:
    1f12:	aa 1f       	adc	r26, r26
    1f14:	bb 1f       	adc	r27, r27
    1f16:	ee 1f       	adc	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	a2 17       	cp	r26, r18
    1f1c:	b3 07       	cpc	r27, r19
    1f1e:	e4 07       	cpc	r30, r20
    1f20:	f5 07       	cpc	r31, r21
    1f22:	20 f0       	brcs	.+8      	; 0x1f2c <__udivmodsi4_ep>
    1f24:	a2 1b       	sub	r26, r18
    1f26:	b3 0b       	sbc	r27, r19
    1f28:	e4 0b       	sbc	r30, r20
    1f2a:	f5 0b       	sbc	r31, r21

00001f2c <__udivmodsi4_ep>:
    1f2c:	66 1f       	adc	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 1f       	adc	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	1a 94       	dec	r1
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <__udivmodsi4_loop>
    1f38:	60 95       	com	r22
    1f3a:	70 95       	com	r23
    1f3c:	80 95       	com	r24
    1f3e:	90 95       	com	r25
    1f40:	9b 01       	movw	r18, r22
    1f42:	ac 01       	movw	r20, r24
    1f44:	bd 01       	movw	r22, r26
    1f46:	cf 01       	movw	r24, r30
    1f48:	08 95       	ret

00001f4a <__prologue_saves__>:
    1f4a:	2f 92       	push	r2
    1f4c:	3f 92       	push	r3
    1f4e:	4f 92       	push	r4
    1f50:	5f 92       	push	r5
    1f52:	6f 92       	push	r6
    1f54:	7f 92       	push	r7
    1f56:	8f 92       	push	r8
    1f58:	9f 92       	push	r9
    1f5a:	af 92       	push	r10
    1f5c:	bf 92       	push	r11
    1f5e:	cf 92       	push	r12
    1f60:	df 92       	push	r13
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	ca 1b       	sub	r28, r26
    1f74:	db 0b       	sbc	r29, r27
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	09 94       	ijmp

00001f82 <__epilogue_restores__>:
    1f82:	2a 88       	ldd	r2, Y+18	; 0x12
    1f84:	39 88       	ldd	r3, Y+17	; 0x11
    1f86:	48 88       	ldd	r4, Y+16	; 0x10
    1f88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f94:	b9 84       	ldd	r11, Y+9	; 0x09
    1f96:	c8 84       	ldd	r12, Y+8	; 0x08
    1f98:	df 80       	ldd	r13, Y+7	; 0x07
    1f9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1f9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1f9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1fa0:	1b 81       	ldd	r17, Y+3	; 0x03
    1fa2:	aa 81       	ldd	r26, Y+2	; 0x02
    1fa4:	b9 81       	ldd	r27, Y+1	; 0x01
    1fa6:	ce 0f       	add	r28, r30
    1fa8:	d1 1d       	adc	r29, r1
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	ed 01       	movw	r28, r26
    1fb6:	08 95       	ret

00001fb8 <_exit>:
    1fb8:	f8 94       	cli

00001fba <__stop_program>:
    1fba:	ff cf       	rjmp	.-2      	; 0x1fba <__stop_program>
